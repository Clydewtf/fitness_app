import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';

class SubscriptionNotificationService {
  static final SubscriptionNotificationService _instance = SubscriptionNotificationService._internal();

  factory SubscriptionNotificationService() {
    return _instance;
  }

  SubscriptionNotificationService._internal();
  static SubscriptionNotificationService get instance => _instance;

  final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await requestExactAlarmPermission();

    const AndroidInitializationSettings androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings settings =
        InitializationSettings(android: androidSettings);

    await _notificationsPlugin.initialize(settings);
  }

  Future<void> requestExactAlarmPermission() async {
    if (await Permission.scheduleExactAlarm.request().isGranted) {
      print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ.");
    } else {
      print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ù–ï –ø–æ–ª—É—á–µ–Ω–æ!");
    }
  }

  Future<void> scheduleSubscriptionNotifications({
    required DateTime endDate,
    required List<int> daysBefore,
    required TimeOfDay time,
  }) async {
    print('üìÖ –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    print('  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $endDate');
    print('  –î–Ω–∏ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º: $daysBefore');
    print('  –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${time.hour}:${time.minute}');

    DateTime now = DateTime.now();

    for (int days in daysBefore) {
      DateTime notificationDate = endDate.subtract(Duration(days: days));
      DateTime finalDateTime = DateTime(
        notificationDate.year,
        notificationDate.month,
        notificationDate.day,
        time.hour,
        time.minute,
      );

      if (finalDateTime.isBefore(now)) {
        print('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É: $finalDateTime');
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–µ
      }

      print('‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $finalDateTime');

      final tz.TZDateTime tzFinalDateTime =
          tz.TZDateTime.from(finalDateTime, tz.local);

      await _notificationsPlugin.zonedSchedule(
        finalDateTime.millisecondsSinceEpoch ~/ 1000,
        '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
        '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!',
        tzFinalDateTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'subscription_reminder',
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ',
            importance: Importance.high,
            priority: Priority.high,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        //matchDateTimeComponents: DateTimeComponents.time,
      );

      print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ $tzFinalDateTime');
    }
  }

  Future<void> reloadScheduledSubscriptionNotifications() async {
    await cancelSubscriptionNotifications();

    SharedPreferences prefs = await SharedPreferences.getInstance();
    bool notificationsEnabled = prefs.getBool('notifications_enabled') ?? false;

    if (!notificationsEnabled) {
      print("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
      return;
    }

    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");

    String? lastPaymentString = prefs.getString('last_payment_date');
    String? subscriptionType = prefs.getString('subscription_type');
    List<String>? daysString = prefs.getStringList('notification_days');
    String? timeString = prefs.getString('notification_time');

    if (lastPaymentString == null || daysString == null || timeString == null || subscriptionType == null) {
      print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.");
      return;
    }

    DateTime lastPaymentDate = DateTime.parse(lastPaymentString);
    List<int> daysBefore = daysString.map(int.parse).toList();
    List<String> timeParts = timeString.split(':');
    TimeOfDay notificationTime = TimeOfDay(
      hour: int.parse(timeParts[0]),
      minute: int.parse(timeParts[1]),
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    int subscriptionDuration = (subscriptionType == '–ì–æ–¥') ? 365 : 30;

    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    DateTime endDate = lastPaymentDate.add(Duration(days: subscriptionDuration));

    DateTime now = DateTime.now();
    while (endDate.isBefore(now)) {
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –¥–≤–∏–≥–∞–µ–º –µ—ë –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
      endDate = endDate.add(Duration(days: subscriptionDuration));
    }

    print("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...");
    print("   üìÜ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞: ${lastPaymentDate.add(Duration(days: subscriptionDuration))}");
    print("   üìÜ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: $endDate");
    print("   üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $now");

    print("üìÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
    print("   üìå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $endDate");
    print("   ‚è≥ –î–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: $daysBefore");
    print("   ‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationTime.hour}:${notificationTime.minute}");

    await scheduleSubscriptionNotifications(
      endDate: endDate,
      daysBefore: daysBefore,
      time: notificationTime,
    );

    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!");
  }

  Future<void> cancelSubscriptionNotifications() async {
    await _notificationsPlugin.cancelAll();
  }
}