import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:shared_preferences/shared_preferences.dart';
import '../../../services/subscription_notification_service.dart';
import '../../widgets/subscription/add_subscription_screen.dart';
import '../../widgets/notifications/notifications_settings_dialog.dart';

class SubscriptionScreen extends StatefulWidget {
  const SubscriptionScreen({super.key});

  @override
  _SubscriptionScreenState createState() => _SubscriptionScreenState();
}

class _SubscriptionScreenState extends State<SubscriptionScreen> {
  String? subscriptionType; // –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–º–µ—Å—è—Ü, –≥–æ–¥)
  DateTime? lastPaymentDate; // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã
  int? daysUntilNextPayment; // –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã
  List<DateTime> paymentHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
  bool _notificationsEnabled = false; // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
  List<int> _notificationDays = []; // –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  TimeOfDay _notificationTime = TimeOfDay(hour: 9, minute: 0); // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  final _subscriptionNotificationService = SubscriptionNotificationService();

  @override
  void initState() {
    super.initState();
    _loadSubscriptionData();
    _loadNotificationPreferences();
  }

  Future<void> _loadSubscriptionData() async {
    final prefs = await SharedPreferences.getInstance();
    final String? type = prefs.getString('subscription_type');
    final String? dateStr = prefs.getString('last_payment_date');
    final List<String>? history = prefs.getStringList('paymentHistory');

    if (type != null && dateStr != null) {
      DateTime lastPayment = DateTime.parse(dateStr);
      DateTime nextPayment = _calculateNextPaymentDate(lastPayment, type);
      int daysLeft = nextPayment.difference(DateTime.now()).inDays;

      setState(() {
        subscriptionType = type;
        lastPaymentDate = lastPayment;
        daysUntilNextPayment = daysLeft >= 0 ? daysLeft : 0; // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        paymentHistory = history?.map((e) => DateTime.parse(e)).toList() ?? [];
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã
  DateTime _calculateNextPaymentDate(DateTime lastPayment, String type) {
    if (type == "–ú–µ—Å—è—Ü") {
      return DateTime(lastPayment.year, lastPayment.month + 1, lastPayment.day);
    } else if (type == "–ì–æ–¥") {
      return DateTime(lastPayment.year + 1, lastPayment.month, lastPayment.day);
    }
    return lastPayment;
  }

  void _markAsPaid() async {
    if (lastPaymentDate == null) return;

    int daysSinceLastPayment = DateTime.now().difference(lastPaymentDate!).inDays;

    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 25 –¥–Ω–µ–π, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (daysSinceLastPayment < 25) {
      _showConfirmPaymentDialog(daysSinceLastPayment);
      return;
    }

    _processPayment();
    
  }

  void _showConfirmPaymentDialog(int daysSinceLastPayment) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç"),
        content: Text("–ü—Ä–æ—à–ª–æ –≤—Å–µ–≥–æ $daysSinceLastPayment –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context), // –û—Ç–º–µ–Ω–∞
            child: Text("–û—Ç–º–µ–Ω–∞"),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context); // –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
              _processPayment(); // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å
            },
            child: Text("–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å"),
          ),
        ],
      ),
    );
  }

  void _processPayment() async {
    DateTime now = DateTime.now();

    setState(() {
      lastPaymentDate = now;
      daysUntilNextPayment = _calculateDaysUntilNextPayment(now);
    });

    _addToPaymentHistory(now);

    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('last_payment_date', now.toIso8601String());

    await _rescheduleSubscriptionNotifications(now);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, monthly –∏–ª–∏ yearly)
    await prefs.setString('subscription_type', subscriptionType ?? '–ú–µ—Å—è—Ü');
  }

  int _calculateDaysUntilNextPayment(DateTime lastPayment) {
    int period = (subscriptionType == "–ú–µ—Å—è—Ü") ? 30 : 365;
    DateTime nextPayment = lastPayment.add(Duration(days: period));

    // üõ† –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã
    while (nextPayment.isBefore(DateTime.now())) {
      nextPayment = nextPayment.add(Duration(days: period));
    }

    int remainingDays = nextPayment.difference(DateTime.now()).inDays;

    // üõ† –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å 0 –¥–Ω–µ–π ‚Äî –∑–Ω–∞—á–∏—Ç, –æ–ø–ª–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
    if (remainingDays == 0) {
      print('üìÜ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã.');
      return 0; 
    }

    return remainingDays;
  }

  void _addToPaymentHistory(DateTime paymentDate) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> history = prefs.getStringList('paymentHistory') ?? [];

    history.add(paymentDate.toIso8601String());

    await prefs.setStringList('paymentHistory', history);

    setState(() {
      paymentHistory.add(paymentDate);
    });
  }

  void _editSubscription() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => AddSubscriptionScreen(
          initialType: subscriptionType!,
          initialDate: lastPaymentDate!,
          onSave: (newType, newDate) async {
            final prefs = await SharedPreferences.getInstance();
            await prefs.setString('subscription_type', newType);
            await prefs.setString('last_payment_date', newDate.toIso8601String());

            setState(() {
              subscriptionType = newType;
              lastPaymentDate = newDate;
              daysUntilNextPayment = _calculateDaysUntilNextPayment(newDate);
            });
          },
        ),
      ),
    );
  }

  void _deleteSubscription() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('subscription_type');
    await prefs.remove('last_payment_date');
    await prefs.remove('paymentHistory');
    await prefs.remove('notifications_enabled');

    setState(() {
      subscriptionType = null;
      lastPaymentDate = null;
      daysUntilNextPayment = null;
      paymentHistory = [];
      _notificationsEnabled = false;
    });

    print('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    _disableNotifications();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("–ê–±–æ–Ω–µ–º–µ–Ω—Ç")),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            subscriptionType == null
                ? _buildAddSubscriptionButton()
                : _buildSubscriptionBlock(),
            SizedBox(height: 20),
            _buildPaymentHistory(), // –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç
          ],
        ),
      ),
    );
  }

  Widget _buildPaymentHistory() {
    if (paymentHistory.isEmpty) {
      return Text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–∞", style: TextStyle(fontSize: 16));
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
        SizedBox(height: 8),
        ListView.builder(
          shrinkWrap: true,
          itemCount: paymentHistory.length,
          itemBuilder: (context, index) {
            return ListTile(
              leading: Icon(Icons.payment),
              title: Text(DateFormat('dd.MM.yyyy').format(paymentHistory[index])),
            );
          },
        ),
      ],
    );
  }

  Widget _buildAddSubscriptionButton() {
    return Center(
      child: ElevatedButton(
        onPressed: () {
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => AddSubscriptionScreen()),
          ).then((_) => _loadSubscriptionData()); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        },
        child: Text("–î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"),
      ),
    );
  }

  Widget _buildSubscriptionBlock() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("–¢–∏–ø: $subscriptionType", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            Text("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã: ${DateFormat('dd.MM.yyyy').format(lastPaymentDate!)}"),
            SizedBox(height: 8),
            Text("–î–æ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: $daysUntilNextPayment –¥–Ω–µ–π", style: TextStyle(fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            ElevatedButton(
              onPressed: () {
                _markAsPaid();
              },
              child: Text("–û–ø–ª–∞—á–µ–Ω–æ"),
            ),
            SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: _editSubscription,
                  child: Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                ),
                ElevatedButton(
                  onPressed: _deleteSubscription,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                  child: Text("–£–¥–∞–ª–∏—Ç—å"),
                ),
              ],
            ),
            SizedBox(height: 16),
            _buildNotificationBlock(), // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          ],
        ),
      ),
    );
  }

  Widget _buildNotificationBlock() {
    return GestureDetector(
      onTap: _showNotificationSettings, // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
          Switch(
            value: _notificationsEnabled,
            onChanged: (bool value) {
              setState(() {
                _notificationsEnabled = value;
                if (value) {
                  _showNotificationSettings(); // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ—Ç—Å—è ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                } else {
                  _disableNotifications(); // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è ‚Äî —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                }
              });
            },
          ),
        ],
      ),
    );
  }

  void _showNotificationSettings() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    
    List<int> savedDays = prefs.getStringList('notification_days')?.map(int.parse).toList() ?? [];
    String? savedTimeStr = prefs.getString('notification_time');
    TimeOfDay savedTime = savedTimeStr != null
        ? TimeOfDay(
            hour: int.parse(savedTimeStr.split(":")[0]),
            minute: int.parse(savedTimeStr.split(":")[1]),
          )
        : TimeOfDay(hour: 9, minute: 0);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return NotificationSettingsDialog(
          selectedDays: savedDays,
          selectedTime: savedTime,
          onSave: (selectedDays, selectedTime) {
            _saveNotificationPreferences(true, selectedDays, selectedTime); // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            _scheduleNotifications(selectedDays, selectedTime); // –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          },
        );
      },
    );
  }

  Future<void> _loadNotificationPreferences() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _notificationsEnabled = prefs.getBool('notifications_enabled') ?? false;

      List<String>? daysString = prefs.getStringList('notification_days');
      _notificationDays = daysString?.map((d) => int.parse(d)).toList() ?? [];

      String? timeString = prefs.getString('notification_time');
      if (timeString != null) {
        List<String> parts = timeString.split(':');
        _notificationTime = TimeOfDay(
          hour: int.parse(parts[0]),
          minute: int.parse(parts[1]),
        );
      } else {
        _notificationTime = TimeOfDay(hour: 9, minute: 0); // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    });

    print('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    print('  –í–∫–ª—é—á–µ–Ω—ã: $_notificationsEnabled');
    print('  –î–Ω–∏: $_notificationDays');
    print('  –í—Ä–µ–º—è: ${_notificationTime.format(context)}');
  }

  Future<void> _saveNotificationPreferences(bool isEnabled, List<int> days, TimeOfDay time) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('notifications_enabled', isEnabled);
    await prefs.setStringList('notification_days', days.map((d) => d.toString()).toList());
    await prefs.setString('notification_time', '${time.hour}:${time.minute.toString().padLeft(2, '0')}');

    print('–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    print('  –í–∫–ª—é—á–µ–Ω—ã: $isEnabled');
    print('  –î–Ω–∏: $days');
    print('  –í—Ä–µ–º—è: ${time.hour}:${time.minute}');
  }
  
  Future<void> _disableNotifications() async {
    await _saveNotificationPreferences(false, [], const TimeOfDay(hour: 9, minute: 0));
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await _subscriptionNotificationService.cancelSubscriptionNotifications();
    print('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã!');
  }

  // Future<void> _scheduleNotifications(List<int> daysBefore, TimeOfDay time) async {
  //   print('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  //   print('  –î–Ω–∏: $daysBefore');
  //   print('  –í—Ä–µ–º—è: ${time.hour}:${time.minute}');
  //   // –¢—É—Ç –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ `flutter_local_notifications`
  //   if (lastPaymentDate != null && daysUntilNextPayment != null) {
  //     DateTime nextPaymentDate = lastPaymentDate!.add(Duration(days: daysUntilNextPayment!));

  //     // üõ† –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥)
  //     // while (nextPaymentDate.isBefore(DateTime.now())) {
  //     //   nextPaymentDate = nextPaymentDate.add(Duration(days: daysUntilNextPayment!));
  //     // }
  //     print('  üìÜ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: $nextPaymentDate');

  //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º
  //     List<int> validDaysBefore = daysBefore.where((days) {
  //       DateTime notificationDate = nextPaymentDate.subtract(Duration(days: days));
  //       bool isFutureDate = notificationDate.isAfter(DateTime.now());
  //       if (!isFutureDate) {
  //         print('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞: $notificationDate');
  //         _saveNotificationPreferences(false, [], const TimeOfDay(hour: 9, minute: 0));
  //       }
  //       return isFutureDate;
  //     }).toList();

  //     if (validDaysBefore.isEmpty) {
  //       print('‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –ø—Ä–æ—à–ª–∏.');
  //       return;
  //     }

  //     await _subscriptionNotificationService.scheduleSubscriptionNotifications(
  //       endDate: nextPaymentDate,
  //       daysBefore: daysBefore,
  //       time: time,
  //     );
  //     print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!');
  //   } else {
  //     print('‚ö†Ô∏è –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.');
  //   }
  // }

  Future<void> _scheduleNotifications(List<int> daysBefore, TimeOfDay time) async {
    print('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    print('  –î–Ω–∏: $daysBefore');
    print('  –í—Ä–µ–º—è: ${time.hour}:${time.minute}');

    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? lastPaymentString = prefs.getString('last_payment_date');
    String? subscriptionType = prefs.getString('subscription_type');

    if (lastPaymentString == null || subscriptionType == null) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ SharedPreferences.');
      return;
    }

    DateTime lastPaymentDate = DateTime.parse(lastPaymentString);
    int subscriptionDuration = (subscriptionType == '–ì–æ–¥') ? 365 : 30;
    DateTime nextPaymentDate = lastPaymentDate.add(Duration(days: subscriptionDuration));

    // üõ† –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–¥–≤–∏–≥–∞–µ–º –µ—ë –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
    while (nextPaymentDate.isBefore(DateTime.now())) {
      nextPaymentDate = nextPaymentDate.add(Duration(days: subscriptionDuration));
    }

    print('  üìÜ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: $nextPaymentDate');

    DateTime now = DateTime.now(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º
    List<int> validDaysBefore = daysBefore.where((days) {
      DateTime notificationDate = nextPaymentDate.subtract(Duration(days: days));
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      notificationDate = DateTime(notificationDate.year, notificationDate.month,
        notificationDate.day, time.hour, time.minute);

      bool isFutureDate = notificationDate.isAfter(DateTime.now());
      if (!isFutureDate) {
        print('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞: $notificationDate');
      }
      return isFutureDate;
    }).toList();

    if (validDaysBefore.isEmpty) {
      print('‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –ø—Ä–æ—à–ª–∏.');
      return;
    }

    await _subscriptionNotificationService.scheduleSubscriptionNotifications(
      endDate: nextPaymentDate,
      daysBefore: validDaysBefore, // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º
      time: time,
    );

    print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!');
  }

  Future<void> _rescheduleSubscriptionNotifications(DateTime newPaymentDate) async {
    print('üîÑ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    
    await SubscriptionNotificationService.instance.cancelSubscriptionNotifications(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    if (_notificationsEnabled && daysUntilNextPayment != null) {
      DateTime nextPaymentDate = newPaymentDate.add(Duration(days: daysUntilNextPayment!));
      print('  üìÜ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: $nextPaymentDate');

      // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final prefs = await SharedPreferences.getInstance();
      _notificationDays = prefs.getStringList('notification_days')?.map(int.parse).toList() ?? _notificationDays;
      int hour = prefs.getInt('notification_hour') ?? _notificationTime.hour;
      int minute = prefs.getInt('notification_minute') ?? _notificationTime.minute;
      _notificationTime = TimeOfDay(hour: hour, minute: minute);

      if (_notificationDays.isNotEmpty) {
        await SubscriptionNotificationService.instance.scheduleSubscriptionNotifications(
          endDate: nextPaymentDate, // –ù–æ–≤—ã–π –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏
          daysBefore: _notificationDays, 
          time: _notificationTime,
        );
        print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.');
      } else {
        print('‚ö†Ô∏è –î–Ω–∏ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ø—É—Å—Ç—ã–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.');
      }
    } else {
      print('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ, –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
    }
  }
}